{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","className","styles","Forms","onSubmit","Form_label","Form_input","type","placeholder","onChange","Form_button","Component","ContactListItem","onDelete","List_item","List_button","onClick","ContactList","contacts","length","List","map","contact","Filter","filter","Title","Title_input","App","handleContact","newContact","handleCheckUnique","console","log","isExistContact","find","handleDeleteContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","localStorage","getItem","parsedСontacts","JSON","parse","prevState","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92072c6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Filter_Title__WH7Is\",\"Title_input\":\"Filter_Title_input__1EX-I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Forms\":\"ContactForm_Forms__1hsa7\",\"Form_label\":\"ContactForm_Form_label__14_ye\",\"Form_input\":\"ContactForm_Form_input__3ltkI\",\"Forminput\":\"ContactForm_Forminput__2FwLW\",\"Form_button\":\"ContactForm_Form_button__2Espz\"};","import PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { Component } from 'react';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n\r\n    const isValidatedForm = this.validateForm();\r\n\r\n    if (!isValidatedForm) return;\r\n    onAdd({ id: uuid(), name, number });\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { onCheckUnique } = this.props;\r\n    if (!name || !number) {\r\n      alert(`Some field is empty`);\r\n\r\n      return false;\r\n    }\r\n    return onCheckUnique(name);\r\n  };\r\n\r\n  resetForm = () => this.setState(this.state);\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.Forms} onSubmit={this.handleSubmit}>\r\n        <label className={styles.Form_label}>\r\n          Name\r\n          <input\r\n            className={styles.Form_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={styles.Form_label}>\r\n          Number\r\n          <input\r\n            className={styles.Form_input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={styles.Form_button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nContactForm.propTypes = {\r\n  onAdd: PropTypes.func.isRequired,\r\n  onCheckUnique: PropTypes.func.isRequired,\r\n};\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, onDelete }) => {\r\n  return (\r\n    <li className={styles.List_item} key={id}>\r\n      <p>{name + ': ' + number}</p>\r\n      <button className={styles.List_button} onClick={() => onDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ContactList = ({ contacts, onDelete }) => {\r\n  if (contacts.length === 0) return null;\r\n\r\n  return (\r\n    <ul className={styles.List}>\r\n      {contacts.map(contact => (\r\n        <ContactListItem key={contact.id} {...contact} onDelete={onDelete} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  onDelete: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n};\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <label className={styles.Title}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.Title_input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={({ target }) => onChange(target.value)}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\nexport default Filter;\r\n","import { Component } from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList/';\r\nimport Filter from './components/Filter';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    number: '',\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    //console.log('App componentDidMount');\r\n\r\n    const contacts = localStorage.getItem('contacts');\r\n    const parsedСontacts = JSON.parse(contacts);\r\n\r\n    //console.log(parsedСontacts);\r\n    if (parsedСontacts) {\r\n      this.setState({ contacts: parsedСontacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    // console.log('App componentDidUpdate');\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      //console.log('Обновилось поле todos, записываю todos в хранилище.');\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  /*componentDidMount() {\r\n    const saveContacts = JSON.parse(window.localStorage.getItem('contacts')); // массив\r\n    if (window.localStorage.getItem('contacts')) {\r\n      this.setState({\r\n        contacts: saveContacts,\r\n      });\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    window.localStorage.setItem(\r\n      'contacts',\r\n      JSON.stringify(this.state.contacts),\r\n    );\r\n  }*/\r\n\r\n  handleContact = newContact =>\r\n    this.setState(({ contacts }) => ({ contacts: [...contacts, newContact] }));\r\n\r\n  handleCheckUnique = name => {\r\n    // проверка\r\n    const { contacts } = this.state;\r\n    console.log(contacts);\r\n    const isExistContact = !!contacts.find(contact => contact.name === name);\r\n\r\n    isExistContact && alert(`${name}is already in the Phonebook`);\r\n    return !isExistContact;\r\n  };\r\n\r\n  handleDeleteContact = id =>\r\n    this.setState(({ contacts }) => ({\r\n      contacts: contacts.filter(contact => contact.id !== id),\r\n    }));\r\n\r\n  handleFilterChange = filter => this.setState({ filter });\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm\r\n          onAdd={this.handleContact}\r\n          onCheckUnique={this.handleCheckUnique}\r\n        />\r\n        <h2>Contacts</h2>\r\n        <Filter filter={filter} onChange={this.handleFilterChange} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDelete={this.handleDeleteContact}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__1Rytt\",\"List_item\":\"ContactList_List_item__TMVjl\",\"List_button\":\"ContactList_List_button__HwJrv\"};"],"sourceRoot":""}